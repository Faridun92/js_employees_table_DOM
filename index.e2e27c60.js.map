{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nvar tbody = table.querySelector(\"tbody\");\nvar form = document.createElement(\"form\");\nvar notifications = document.createElement(\"div\");\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    createTable();\n    setupNotifications();\n});\nfunction createTable() {\n    form.classList.add(\"new-employee-form\");\n    form.innerHTML = '\\n  <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required></label>\\n  <label>Position: <input name=\"position\" type=\"text\" data-qa=\"position\"></label>\\n  <label>Office:\\n    <select name=\"office\" data-qa=\"office\" required>\\n      <option value=\"\" disabled selected>Select an office</option>\\n      <option value=\"Tokyo\">Tokyo</option>\\n      <option value=\"Singapore\">Singapore</option>\\n      <option value=\"London\">London</option>\\n      <option value=\"New York\">New York</option>\\n      <option value=\"Edinburgh\">Edinburgh</option>\\n      <option value=\"San Francisco\">San Francisco</option>\\n    </select>\\n  </label>\\n  <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required></label>\\n  <label>Salary: <input name=\"salary\" type=\"number\" step=\"0.01\" data-qa=\"salary\" required></label>\\n  <button type=\"submit\">Save to table</button>\\n  ';\n    document.body.appendChild(form);\n}\nfunction setupNotifications() {\n    notifications.classList.add(\"notifications\");\n    document.body.appendChild(notifications);\n}\nvar sortOrder = {\n    name: \"asc\",\n    position: \"asc\",\n    office: \"asc\",\n    age: \"asc\",\n    salary: \"asc\"\n};\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var thead = table.querySelector(\"thead\");\n    thead.addEventListener(\"click\", sorting);\n    tbody.addEventListener(\"click\", selectTd);\n    form.addEventListener(\"submit\", addEmployee);\n});\nfunction selectTd(e) {\n    if (e.target.tagName === \"TD\") {\n        var rows = document.querySelectorAll(\"tr.active\");\n        rows.forEach(function(delRow) {\n            return delRow.classList.remove(\"active\");\n        });\n        var row = e.target.closest(\"tr\");\n        if (row) row.classList.add(\"active\");\n    }\n}\nfunction getTable() {\n    var newArr = Array.from(tbody.querySelectorAll(\"tr\")).map(function(row) {\n        var cells = row.querySelectorAll(\"td\");\n        return {\n            name: cells[0].textContent.trim(),\n            position: cells[1].textContent.trim(),\n            office: cells[2].textContent.trim(),\n            age: parseInt(cells[3].textContent.trim(), 10),\n            salary: parseFloat(cells[4].textContent.trim().replace(/[$,]/g, \"\"))\n        };\n    });\n    return newArr;\n}\nfunction sorting(e) {\n    var headName = getName(e);\n    if (!headName) return;\n    var workersArr = getTable();\n    sortList(headName, workersArr);\n    function getName() {\n        e.preventDefault();\n        if (e.target.tagName === \"TH\") return e.target.textContent.trim().toLowerCase();\n        return null;\n    }\n    function sortList(title, workers) {\n        var titleTH = title.toLowerCase();\n        var sortBy = {\n            name: \"name\",\n            position: \"position\",\n            office: \"office\",\n            age: \"age\",\n            salary: \"salary\"\n        }[titleTH];\n        if (sortBy) {\n            var order = sortOrder[sortBy] === \"asc\" ? 1 : -1;\n            workers.sort(function(a, b) {\n                if (a[sortBy] < b[sortBy]) return -1 * order;\n                if (a[sortBy] > b[sortBy]) return 1 * order;\n                return 0;\n            });\n            sortOrder[sortBy] = sortOrder[sortBy] === \"asc\" ? \"desc\" : \"asc\";\n            updateTable(workers);\n        }\n    }\n    function updateTable(finalArr) {\n        tbody.innerHTML = \"\";\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = finalArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var worker = _step.value;\n                var row = document.createElement(\"tr\");\n                row.innerHTML = \"\\n        <td>\".concat(worker.name, \"</td>\\n        <td>\").concat(worker.position, \"</td>\\n        <td>\").concat(worker.office, \"</td>\\n        <td>\").concat(worker.age, \"</td>\\n        <td>$\").concat(worker.salary.toLocaleString(\"en-US\"), \"</td>\\n      \");\n                tbody.appendChild(row);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n}\nfunction addEmployee(e) {\n    e.preventDefault();\n    var nameWorker = form.querySelector('input[name=\"name\"]').value.trim();\n    var position = form.querySelector('input[name=\"position\"]').value.trim();\n    var office = form.querySelector('select[name=\"office\"]').value.trim();\n    var age = parseInt(form.querySelector('input[name=\"age\"]').value.trim(), 10);\n    var salary = parseFloat(form.querySelector('input[name=\"salary\"]').value.trim());\n    if (!nameWorker || !position || !office || isNaN(age) || isNaN(salary)) {\n        showNotification(\"error\", \"Validation Error\", \"All fields are required and must be valid.\");\n        return;\n    }\n    if (nameWorker.length < 4) {\n        showNotification(\"error\", \"Validation Error\", \"Name must be at least 4 letters long.\");\n        return;\n    }\n    if (position.length < 4) {\n        showNotification(\"error\", \"Validation Error\", \"Position must be valid.\");\n        return;\n    }\n    if (age < 18 || age > 90) {\n        showNotification(\"error\", \"Validation Error\", \"Age must be between 18 and 90.\");\n        return;\n    }\n    var newRow = document.createElement(\"tr\");\n    newRow.innerHTML = \"\\n    <td>\".concat(nameWorker, \"</td>\\n    <td>\").concat(position, \"</td>\\n    <td>\").concat(office, \"</td>\\n    <td>\").concat(age, \"</td>\\n    <td>$\").concat(salary.toLocaleString(\"en-US\", {\n        minimumFractionDigits: 0\n    }), \"</td>\\n  \");\n    tbody.appendChild(newRow);\n    form.reset();\n    showNotification(\"success\", \"Success\", \"Employee added to the table.\");\n}\nfunction showNotification(type, title, description) {\n    var notification = document.createElement(\"div\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.innerHTML = \"\\n    <strong>\".concat(title, \"</strong>\\n    <p>\").concat(description, \"</p>\\n  \");\n    notifications.appendChild(notification);\n    setTimeout(function() {\n        notifications.removeChild(notification);\n    }, 3000);\n}\n\n//# sourceMappingURL=index.e2e27c60.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\n\nconst form = document.createElement('form');\nconst notifications = document.createElement('div');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  createTable();\n  setupNotifications();\n});\n\nfunction createTable() {\n  form.classList.add('new-employee-form');\n\n  form.innerHTML = `\n  <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required></label>\n  <label>Position: <input name=\"position\" type=\"text\" data-qa=\"position\"></label>\n  <label>Office:\n    <select name=\"office\" data-qa=\"office\" required>\n      <option value=\"\" disabled selected>Select an office</option>\n      <option value=\"Tokyo\">Tokyo</option>\n      <option value=\"Singapore\">Singapore</option>\n      <option value=\"London\">London</option>\n      <option value=\"New York\">New York</option>\n      <option value=\"Edinburgh\">Edinburgh</option>\n      <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n  <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required></label>\n  <label>Salary: <input name=\"salary\" type=\"number\" step=\"0.01\" data-qa=\"salary\" required></label>\n  <button type=\"submit\">Save to table</button>\n  `;\n\n  document.body.appendChild(form);\n}\n\nfunction setupNotifications() {\n  notifications.classList.add('notifications');\n  document.body.appendChild(notifications);\n}\n\nconst sortOrder = {\n  name: 'asc',\n  position: 'asc',\n  office: 'asc',\n  age: 'asc',\n  salary: 'asc',\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const thead = table.querySelector('thead');\n\n  thead.addEventListener('click', sorting);\n  tbody.addEventListener('click', selectTd);\n  form.addEventListener('submit', addEmployee);\n});\n\nfunction selectTd(e) {\n  if (e.target.tagName === 'TD') {\n    const rows = document.querySelectorAll('tr.active');\n\n    rows.forEach((delRow) => delRow.classList.remove('active'));\n\n    const row = e.target.closest('tr');\n\n    if (row) {\n      row.classList.add('active');\n    }\n  }\n}\n\nfunction getTable() {\n  const newArr = Array.from(tbody.querySelectorAll('tr')).map((row) => {\n    const cells = row.querySelectorAll('td');\n\n    return {\n      name: cells[0].textContent.trim(),\n      position: cells[1].textContent.trim(),\n      office: cells[2].textContent.trim(),\n      age: parseInt(cells[3].textContent.trim(), 10),\n      salary: parseFloat(cells[4].textContent.trim().replace(/[$,]/g, '')),\n    };\n  });\n\n  return newArr;\n}\n\nfunction sorting(e) {\n  const headName = getName(e);\n\n  if (!headName) {\n    return;\n  }\n\n  const workersArr = getTable();\n\n  sortList(headName, workersArr);\n\n  function getName() {\n    e.preventDefault();\n\n    if (e.target.tagName === 'TH') {\n      return e.target.textContent.trim().toLowerCase();\n    }\n\n    return null;\n  }\n\n  function sortList(title, workers) {\n    const titleTH = title.toLowerCase();\n    const sortBy = {\n      name: 'name',\n      position: 'position',\n      office: 'office',\n      age: 'age',\n      salary: 'salary',\n    }[titleTH];\n\n    if (sortBy) {\n      const order = sortOrder[sortBy] === 'asc' ? 1 : -1;\n\n      workers.sort((a, b) => {\n        if (a[sortBy] < b[sortBy]) {\n          return -1 * order;\n        }\n\n        if (a[sortBy] > b[sortBy]) {\n          return 1 * order;\n        }\n\n        return 0;\n      });\n      sortOrder[sortBy] = sortOrder[sortBy] === 'asc' ? 'desc' : 'asc';\n      updateTable(workers);\n    }\n  }\n\n  function updateTable(finalArr) {\n    tbody.innerHTML = '';\n\n    for (const worker of finalArr) {\n      const row = document.createElement('tr');\n\n      row.innerHTML = `\n        <td>${worker.name}</td>\n        <td>${worker.position}</td>\n        <td>${worker.office}</td>\n        <td>${worker.age}</td>\n        <td>$${worker.salary.toLocaleString('en-US')}</td>\n      `;\n      tbody.appendChild(row);\n    }\n  }\n}\n\nfunction addEmployee(e) {\n  e.preventDefault();\n\n  const nameWorker = form.querySelector('input[name=\"name\"]').value.trim();\n  const position = form.querySelector('input[name=\"position\"]').value.trim();\n  const office = form.querySelector('select[name=\"office\"]').value.trim();\n  const age = parseInt(\n    form.querySelector('input[name=\"age\"]').value.trim(),\n    10,\n  );\n  const salary = parseFloat(\n    form.querySelector('input[name=\"salary\"]').value.trim(),\n  );\n\n  if (!nameWorker || !position || !office || isNaN(age) || isNaN(salary)) {\n    showNotification(\n      'error',\n      'Validation Error',\n      'All fields are required and must be valid.',\n    );\n\n    return;\n  }\n\n  if (nameWorker.length < 4) {\n    showNotification(\n      'error',\n      'Validation Error',\n      'Name must be at least 4 letters long.',\n    );\n\n    return;\n  }\n\n  if (position.length < 4) {\n    showNotification('error', 'Validation Error', 'Position must be valid.');\n\n    return;\n  }\n\n  if (age < 18 || age > 90) {\n    showNotification(\n      'error',\n      'Validation Error',\n      'Age must be between 18 and 90.',\n    );\n\n    return;\n  }\n\n  const newRow = document.createElement('tr');\n\n  newRow.innerHTML = `\n    <td>${nameWorker}</td>\n    <td>${position}</td>\n    <td>${office}</td>\n    <td>${age}</td>\n    <td>$${salary.toLocaleString('en-US', { minimumFractionDigits: 0 })}</td>\n  `;\n  tbody.appendChild(newRow);\n\n  form.reset();\n  showNotification('success', 'Success', 'Employee added to the table.');\n}\n\nfunction showNotification(type, title, description) {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', 'notification');\n\n  notification.innerHTML = `\n    <strong>${title}</strong>\n    <p>${description}</p>\n  `;\n\n  notifications.appendChild(notification);\n\n  setTimeout(() => {\n    notifications.removeChild(notification);\n  }, 3000);\n}\n"],"names":["table","document","querySelector","tbody","form","createElement","notifications","addEventListener","classList","add","innerHTML","body","appendChild","sortOrder","name","position","office","age","salary","selectTd","e","target","tagName","rows","querySelectorAll","forEach","delRow","remove","row","closest","sorting","headName","preventDefault","textContent","trim","toLowerCase","sortList","title","workers","sortBy","order","sort","a","b","updateTable","finalArr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","worker","value","concat","toLocaleString","err","return","Array","from","map","cells","parseInt","parseFloat","replace","addEmployee","nameWorker","isNaN","showNotification","length","newRow","minimumFractionDigits","reset","type","description","notification","className","setAttribute","setTimeout","removeChild","thead"],"version":3,"file":"index.e2e27c60.js.map"}